import torch
from dataclasses import dataclass
from abc import ABC, abstractmethod
from typing import Tuple
from transformers import AutoModelForCausalLM, AutoTokenizer

@dataclass
class Usage:
    """
    The runtime stats during inference when using EagleRunner.

    Args:
        num_generated_tokens: The number of tokens generated by the eagle model.
        accepted_tokens: The number of tokens generated by the draft model and accepted by the base model.
        tpot: The time per output token during decoding.
    """
    num_generated_tokens: int
    accepted_tokens: int
    tpot: float

    def __str__(self):
        return """
Usage:
    num_generated_tokens: {self.num_generated_tokens}
    accepted_tokens: {self.accepted_tokens}
    tpot: {self.tpot}
"""

class EagleRunner:
    """
    This class is a simple runner to run inference with Eagle3. It serves as a simple verifier of the speedup of Eagle3. 
    In case you want to use more advanced features such kernel optimization and distributed inference, you should try SGLang.
    """

    def __init__(self, base_model_path, draft_model_path):
        # TODO: support loading from the sgl-ealge lib
        self.base_model = AutoModelForCausalLM.from_pretrained(base_model_path).eval()
        self.draft_model = AutoModelForCausalLM.from_pretrained(draft_model_path).eval()
        self.tokenizer = AutoTokenizer.from_pretrained(base_model_path)

    def run(self, prompt: str, enable_eagle: bool = True) -> Tuple[str, Usage]:
        """
        Run the eagle model with the given prompt and sampling parameters. 

        Args:
            prompt (str): The prompt to run the eagle model with.
            enable_eagle (bool): Whether to enable eagle.

        Returns:
            Tuple[str, Usage]: The generated text and the usage stats.
        """
        pass


class EagleTrainer(ABC):

    def step(self):
        pass

class OnlineEagleTrainer(EagleRunner):

    def step(self, input_ids, attention_mask) -> torch.Tensor:
        pass

class OfflineEagleTrainer(EagleTrainer):

    def __init__(self, draft_model, tokenizer):
        self.draft_model = draft_model
        self.tokenizer = tokenizer

    def step(self, hidden_states, attention_mask) -> torch.Tensor:
        pass