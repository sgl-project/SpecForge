# This Config is for training Llama-4 Scout 17Bx16E eagle3 head model.

output_dir: /tmp/torchtune/llama4_17Bx16E/full

# Modeling arguments
model:
  _component_: spec.models.llama4.llama4_scout_17b_16e

tensor_parallel_dim: 1 # For multi-node training we recommend tensor_parallel_dim: 8
tensor_parallel_plan:
  _component_: torchtune.models.llama4.decoder_only_tp_plan
data_parallel_shard_dim: -1 # Will infer based on TP dim, effectively controls FSDP
data_parallel_replicate_dim: 1

tokenizer:
  _component_: torchtune.models.llama4.llama4_transform
  path: /tmp/Llama-4-Scout-17B-16E-Instruct/tokenizer.model
  max_seq_len: 2048
  max_num_tiles: 16

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /tmp/Llama-4-Scout-17B-16E-Instruct
  checkpoint_files:
    filename_format: model-{}-of-{}.safetensors
    max_filename: "00051"
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA4
resume_from_checkpoint: True

# Dataset
dataset:
  # - _component_: torchtune.datasets.chat_dataset
  #   source: Aeala/ShareGPT_Vicuna_unfiltered
  #   conversation_column: conversations
  #   conversation_style: sharegpt
  #   packed: False
  #   split: train
  - _component_: spec.datasets.chat_dataset
    source: HuggingFaceH4/ultrachat_200k
    conversation_column: messages
    conversation_style: openai
    packed: False
    split: train_sft
  # - _component_: torchtune.datasets.chat_dataset
  #   source: HuggingFaceH4/ultrachat_200k
  #   conversation_column: messages
  #   conversation_style: openai
  #   packed: False
  #   split: train_gen
  - _component_: spec.datasets.chat_dataset
    source: Magpie-Align/Magpie-Llama-3.1-Pro-300K-Filtered
    conversation_column: conversations
    conversation_style: sharegpt
    packed: False
    split: train
seed: null
shuffle: True

# Training arguments
epochs: 1
max_steps_per_epoch: null
batch_size: 2
gradient_accumulation_steps: 8 # Use to increase effective batch size
optimizer:
  _component_: torch.optim.AdamW
  lr: 5e-5
  weight_decay: 0.0
  betas: [0.9, 0.95]
  fused: False
optimizer_in_bwd: False
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 600
  num_training_steps: 6910
  last_epoch: -1
loss:
  _component_: spec.modules.loss.DraftLoss
clip_grad_norm: null

# cuda, cpu, rocm, xpu...
device: cuda

# Memory management / performance
enable_activation_checkpointing: False
enable_activation_offloading: False
fsdp_cpu_offload: False
# compile True means use torch.compile for all components
# compile False means no torch.compile
# compile Dictionary with keys: "model", "loss", "optimizer_step"
# enables torch.compile only for specified components.
compile: False
#    model: True
#    loss: True
#    optimizer_step: False
#    scale_grads: True

# Reduced precision
dtype: bf16

# Log metrics during training
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: True
log_level: INFO  # DEBUG, WARN, etc.

# Useful for understanding how to optimize memory and performance
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False
